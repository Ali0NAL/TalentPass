// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: jobs.sql

package repo

import (
	"context"
)

const createJob = `-- name: CreateJob :one
INSERT INTO jobs (org_id, title, company, url, location, tags)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, org_id, title, company, url, location, tags, created_at
`

type CreateJobParams struct {
	OrgID    *int64   `json:"org_id"`
	Title    string   `json:"title"`
	Company  string   `json:"company"`
	Url      *string  `json:"url"`
	Location *string  `json:"location"`
	Tags     []string `json:"tags"`
}

func (q *Queries) CreateJob(ctx context.Context, arg CreateJobParams) (Job, error) {
	row := q.db.QueryRow(ctx, createJob,
		arg.OrgID,
		arg.Title,
		arg.Company,
		arg.Url,
		arg.Location,
		arg.Tags,
	)
	var i Job
	err := row.Scan(
		&i.ID,
		&i.OrgID,
		&i.Title,
		&i.Company,
		&i.Url,
		&i.Location,
		&i.Tags,
		&i.CreatedAt,
	)
	return i, err
}

const listJobs = `-- name: ListJobs :many
SELECT id, org_id, title, company, url, location, tags, created_at
FROM jobs
WHERE ($1::bigint IS NULL OR org_id = $1)
  AND ($2::text IS NULL OR company ILIKE '%' || $2 || '%')
  AND ($3::text   IS NULL OR title   ILIKE '%' || $3   || '%')
ORDER BY created_at DESC
LIMIT $5 OFFSET $4
`

type ListJobsParams struct {
	OrgID   *int64  `json:"org_id"`
	Company *string `json:"company"`
	Title   *string `json:"title"`
	Offset  int32   `json:"offset"`
	Limit   int32   `json:"limit"`
}

func (q *Queries) ListJobs(ctx context.Context, arg ListJobsParams) ([]Job, error) {
	rows, err := q.db.Query(ctx, listJobs,
		arg.OrgID,
		arg.Company,
		arg.Title,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Job
	for rows.Next() {
		var i Job
		if err := rows.Scan(
			&i.ID,
			&i.OrgID,
			&i.Title,
			&i.Company,
			&i.Url,
			&i.Location,
			&i.Tags,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
