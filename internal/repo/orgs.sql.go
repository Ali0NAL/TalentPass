// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: orgs.sql

package repo

import (
	"context"
)

const addOrgMember = `-- name: AddOrgMember :exec
INSERT INTO org_members (org_id, user_id, role) VALUES ($1, $2, $3)
ON CONFLICT (org_id, user_id) DO UPDATE SET role = EXCLUDED.role
`

type AddOrgMemberParams struct {
	OrgID  int64  `json:"org_id"`
	UserID int64  `json:"user_id"`
	Role   string `json:"role"`
}

func (q *Queries) AddOrgMember(ctx context.Context, arg AddOrgMemberParams) error {
	_, err := q.db.Exec(ctx, addOrgMember, arg.OrgID, arg.UserID, arg.Role)
	return err
}

const createOrganization = `-- name: CreateOrganization :one
INSERT INTO organizations (name) VALUES ($1)
RETURNING id, name, created_at
`

func (q *Queries) CreateOrganization(ctx context.Context, name string) (Organization, error) {
	row := q.db.QueryRow(ctx, createOrganization, name)
	var i Organization
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const getOrgMemberRole = `-- name: GetOrgMemberRole :one
SELECT role
FROM org_members
WHERE org_id = $1 AND user_id = $2
`

type GetOrgMemberRoleParams struct {
	OrgID  int64 `json:"org_id"`
	UserID int64 `json:"user_id"`
}

func (q *Queries) GetOrgMemberRole(ctx context.Context, arg GetOrgMemberRoleParams) (string, error) {
	row := q.db.QueryRow(ctx, getOrgMemberRole, arg.OrgID, arg.UserID)
	var role string
	err := row.Scan(&role)
	return role, err
}

const getOrganization = `-- name: GetOrganization :one
SELECT id, name, created_at FROM organizations WHERE id = $1
`

func (q *Queries) GetOrganization(ctx context.Context, id int64) (Organization, error) {
	row := q.db.QueryRow(ctx, getOrganization, id)
	var i Organization
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const listMyOrganizations = `-- name: ListMyOrganizations :many
SELECT o.id, o.name, o.created_at
FROM organizations o
JOIN org_members m ON m.org_id = o.id
WHERE m.user_id = $1
ORDER BY o.created_at DESC
`

func (q *Queries) ListMyOrganizations(ctx context.Context, userID int64) ([]Organization, error) {
	rows, err := q.db.Query(ctx, listMyOrganizations, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Organization
	for rows.Next() {
		var i Organization
		if err := rows.Scan(&i.ID, &i.Name, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
